spring.application.name=transaction
# Vault Configuration
spring.cloud.vault.uri=http://127.0.0.1:8200
spring.cloud.vault.authentication=TOKEN
#
spring.cloud.vault.kv.enabled=true
spring.cloud.vault.kv.backend=secret
spring.cloud.vault.kv.default-context=secret/application
spring.config.import=optional:vault://
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.consumer.group-id=my-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=true
#spring.data.mongodb.uri=mongodb://localhost:27017/TestDataBase
server.port=8080
kafka.group.id=test1
logging.config=classpath:logback-spring.xml
# Circuit Breaker Configuration
resilience4j.circuitbreaker.instances.transaction-service.failureRateThreshold=50
resilience4j.circuitbreaker.instances.transaction-service.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.transaction-service.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.transaction-service.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.transaction-service.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.transaction-service.slidingWindowSize=10
resilience4j.circuitbreaker.instances.transaction-service.eventConsumerBufferSize=10
resilience4j.circuitbreaker.instances.transaction-service.registerHealthIndicator=true

# Retry Configuration
resilience4j.retry.instances.transaction-service.maxAttempts=3
resilience4j.retry.instances.transaction-service.waitDuration=1s

# TimeLimiter Configuration
resilience4j.timelimiter.instances.transaction-service.timeoutDuration=5s
resilience4j.timelimiter.instances.transaction-service.cancelRunningFuture=true

#Redis
#spring.cache.type=redis
#spring.redis.host=localhost
#spring.redis.port=6379
#spring.cache.redis.time-to-live=60000

